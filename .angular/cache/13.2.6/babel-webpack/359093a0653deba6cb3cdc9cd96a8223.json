{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { authGetCurrentManagerSuccess } from 'src/app/core/auth/actions';\nimport { TOKEN_LOCAL_STORAGE_KEY_ACCESS, TOKEN_LOCAL_STORAGE_KEY_REFRESH } from '../constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/authorize.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, managerService, store) {\n      this.router = router;\n      this.managerService = managerService;\n      this.store = store;\n    }\n\n    canActivate() {\n      return this.managerService.getCurrentManger().pipe(tap(data => {\n        const accessToken = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY_ACCESS);\n        const refreshToken = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY_REFRESH);\n        this.store.dispatch(authGetCurrentManagerSuccess(Object.assign(Object.assign({}, data), {\n          tokens: {\n            accessToken,\n            refreshToken\n          }\n        })));\n      }), map(() => true), catchError(res => {\n        this.router.navigate(['/login']);\n        return of(false);\n      }));\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ManagerService), i0.ɵɵinject(i3.Store));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}