{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport * as action from \"./actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/shared/services/orders.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let OrdersEffects = /*#__PURE__*/(() => {\n  class OrdersEffects {\n    constructor(actions$, ordersService, store) {\n      this.actions$ = actions$;\n      this.ordersService = ordersService;\n      this.store = store;\n      this.getOrders$ = createEffect(() => this.actions$.pipe(ofType(action.ORDERS_GET_ALL_REQUEST), switchMap(() => this.ordersService.getAllOrders().pipe(map(data => action.ordersGetAllSuccess({\n        payload: data\n      })), catchError(err => of(action.ordersGetAllError({\n        err: err.message\n      })))))));\n      this.getOrdersAggregate$ = createEffect(() => this.actions$.pipe(ofType(action.ORDERS_GET_ALL_AGGREGATE_REQUEST), switchMap(() => this.ordersService.getAllOrdersAggregateProducts().pipe(map(data => action.ordersGetAllAggregateSuccess({\n        payload: data\n      })), catchError(err => of(action.ordersGetAllAggregateError({\n        err: err.message\n      })))))));\n      this.confirmStatusOrder$ = createEffect(() => this.actions$.pipe(ofType(action.ORDERS_CONFIRM_STATUS_REQUEST), switchMap(props => {\n        return this.ordersService.confirmOrdersStatus(props).pipe(map(data => action.ordersConfirmStatusSuccess({\n          payload: data\n        })), catchError(err => of(action.ordersConfirmStatusError({\n          err: err.message\n        }))));\n      })));\n      this.addOrder$ = createEffect(() => this.actions$.pipe(ofType(action.ORDERS_ADD_REQUEST), switchMap(props => {\n        return this.ordersService.addOrder(props).pipe(map(data => action.ordersAddSuccess({\n          payload: data\n        })), catchError(err => of(action.ordersAddError({\n          err: err.message\n        }))));\n      })));\n      this.updateOrder$ = createEffect(() => this.actions$.pipe(ofType(action.ORDERS_EDIT_REQUEST), switchMap(props => {\n        return this.ordersService.updateOrder(props).pipe(map(data => action.ordersEditSuccess({\n          payload: data\n        })), catchError(err => of(action.ordersEditError({\n          err: err.message\n        }))));\n      })));\n    }\n\n  }\n\n  OrdersEffects.ɵfac = function OrdersEffects_Factory(t) {\n    return new (t || OrdersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.OrdersService), i0.ɵɵinject(i3.Store));\n  };\n\n  OrdersEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersEffects,\n    factory: OrdersEffects.ɵfac\n  });\n  return OrdersEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}