{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { getCatalog } from 'src/app/core';\nimport { catalogGetAllRequest } from 'src/app/core/catalog/actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/chips\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/material/core\";\nconst _c0 = [\"productInput\"];\n\nfunction ChipsAddProductComponent_mat_chip_3_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1, \"cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChipsAddProductComponent_mat_chip_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-chip\", 9);\n    i0.ɵɵlistener(\"removed\", function ChipsAddProductComponent_mat_chip_3_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const product_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.remove(product_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ChipsAddProductComponent_mat_chip_3_mat_icon_2_Template, 2, 0, \"mat-icon\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const product_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectable\", ctx_r1.selectable)(\"removable\", ctx_r1.removable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", product_r5, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.removable);\n  }\n}\n\nfunction ChipsAddProductComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const prod_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", prod_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", prod_r9, \" \");\n  }\n}\n\nexport let ChipsAddProductComponent = /*#__PURE__*/(() => {\n  class ChipsAddProductComponent {\n    constructor(store) {\n      this.store = store;\n      this.selectable = true;\n      this.removable = true;\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.productCtrl = new FormControl();\n      this.products = [];\n      this.arrProductId = [];\n      this.allProducts = [];\n      this.arrProductObj = [];\n      this.arrProductIdChanged = new EventEmitter();\n      this.initialProductList = null;\n\n      this.utilGetArrProductIdAndEmit = () => {\n        this.arrProductId = this.products.map(el => this.arrProductObj.find(obj => obj.product === el)._id);\n        this.arrProductIdChanged.emit(this.arrProductId);\n      };\n    }\n\n    ngOnInit() {\n      if (this.initialProductList) this.products = this.initialProductList.map(el => el.product);\n      this.store.dispatch(catalogGetAllRequest());\n      this.store.select(getCatalog).pipe().subscribe(catalog => {\n        this.arrProductObj = catalog;\n        this.allProducts = catalog.map(el => el.product);\n        this.filteredProducts = this.productCtrl.valueChanges.pipe(startWith(null), map(product => product ? this._filter(product) : this.allProducts.slice()));\n      });\n    }\n\n    add(event) {\n      const value = (event.value || '').trim();\n      if (value) this.products.push(value);\n      event.input.value = \"\";\n      this.productCtrl.setValue(null);\n      this.utilGetArrProductIdAndEmit();\n    }\n\n    remove(product) {\n      const index = this.products.indexOf(product);\n      if (index >= 0) this.products.splice(index, 1);\n      this.utilGetArrProductIdAndEmit();\n    }\n\n    selected(event) {\n      if (!this.products.includes(event.option.viewValue)) this.products.push(event.option.viewValue);\n      this.productInput.nativeElement.value = '';\n      this.productCtrl.setValue(null);\n      this.utilGetArrProductIdAndEmit();\n    }\n\n    _filter(value) {\n      const filterValue = value.toLowerCase();\n      return this.allProducts.filter(product => product.toLowerCase().includes(filterValue));\n    }\n\n  }\n\n  ChipsAddProductComponent.ɵfac = function ChipsAddProductComponent_Factory(t) {\n    return new (t || ChipsAddProductComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  ChipsAddProductComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipsAddProductComponent,\n    selectors: [[\"app-chips-add-product\"]],\n    viewQuery: function ChipsAddProductComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.productInput = _t.first);\n      }\n    },\n    inputs: {\n      initialProductList: \"initialProductList\"\n    },\n    outputs: {\n      arrProductIdChanged: \"arrProductIdChanged\"\n    },\n    decls: 10,\n    vars: 8,\n    consts: [[\"appearance\", \"fill\", 1, \"example-chip-list\"], [\"aria-label\", \"product selection\"], [\"chipList\", \"\"], [3, \"selectable\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Add product\", 3, \"formControl\", \"matAutocomplete\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputTokenEnd\"], [\"productInput\", \"\"], [3, \"optionSelected\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"selectable\", \"removable\", \"removed\"], [\"matChipRemove\", \"\", 4, \"ngIf\"], [\"matChipRemove\", \"\"], [3, \"value\"]],\n    template: function ChipsAddProductComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-chip-list\", 1, 2);\n        i0.ɵɵtemplate(3, ChipsAddProductComponent_mat_chip_3_Template, 3, 4, \"mat-chip\", 3);\n        i0.ɵɵelementStart(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsAddProductComponent_Template_input_matChipInputTokenEnd_4_listener($event) {\n          return ctx.add($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", 6, 7);\n        i0.ɵɵlistener(\"optionSelected\", function ChipsAddProductComponent_Template_mat_autocomplete_optionSelected_6_listener($event) {\n          return ctx.selected($event);\n        });\n        i0.ɵɵtemplate(8, ChipsAddProductComponent_mat_option_8_Template, 2, 2, \"mat-option\", 8);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(2);\n\n        const _r3 = i0.ɵɵreference(7);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.products);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formControl\", ctx.productCtrl)(\"matAutocomplete\", _r3)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 6, ctx.filteredProducts));\n      }\n    },\n    directives: [i2.MatFormField, i3.MatChipList, i4.NgForOf, i3.MatChip, i4.NgIf, i5.MatIcon, i3.MatChipRemove, i6.DefaultValueAccessor, i7.MatAutocompleteTrigger, i3.MatChipInput, i6.NgControlStatus, i6.FormControlDirective, i7.MatAutocomplete, i8.MatOption],\n    pipes: [i4.AsyncPipe],\n    styles: [\".example-chip-list[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return ChipsAddProductComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}