{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as Actions from './actions';\nexport const INIT_STATE = {\n  isAuthenticated: null,\n  email: null,\n  role: null\n};\nexport const INIT_STATE_ERROR = {\n  error: null\n};\nexport const INIT_STATE_TOKEN = {\n  accessToken: null,\n  refreshToken: null\n};\nexport const reducer = createReducer(INIT_STATE, on(Actions.authGetCurrentManagerSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  isAuthenticated: true,\n  email: action.email,\n  role: action.role\n})), on(Actions.authLogInManagerSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  email: action.payload.email,\n  role: action.payload.role\n})), on(Actions.authVerifyManagerSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  isAuthenticated: true,\n  email: action.payload.email,\n  role: action.payload.role\n})), on(Actions.authLogInManagerError, (state, action) => INIT_STATE), on(Actions.authVerifyManagerError, (state, action) => INIT_STATE), on(Actions.authLogOutManagerError, (state, action) => INIT_STATE), on(Actions.authLogOutManagerSuccess, (state, action) => INIT_STATE));\nexport const reducerError = createReducer(INIT_STATE_ERROR, on(Actions.authLogInManagerError, (state, action) => ({\n  error: action.err\n})), on(Actions.authVerifyManagerError, (state, action) => ({\n  error: action.err\n})), on(Actions.authLogOutManagerError, (state, action) => ({\n  error: action.err\n})), on(Actions.authGetCurrentManagerError, (state, action) => ({\n  error: action.err\n})), on(Actions.authSignInCustomerError, (state, action) => ({\n  error: action.err\n})), on(Actions.authLogInManagerRequest, (state, action) => INIT_STATE_ERROR), on(Actions.authVerifyManagerRequest, (state, action) => INIT_STATE_ERROR), on(Actions.authLogOutManagerRequest, (state, action) => INIT_STATE_ERROR), on(Actions.authGetCurrentManagerRequest, (state, action) => INIT_STATE_ERROR));\nexport const reducerToken = createReducer(INIT_STATE_TOKEN, on(Actions.authGetCurrentManagerSuccess, (state, action) => action.tokens), on(Actions.authVerifyManagerSuccess, (state, action) => action.payload.tokens), on(Actions.authSignInCustomerSuccess, (state, action) => action.payload.tokens), on(Actions.authVerifyManagerError, (state, action) => INIT_STATE_TOKEN), on(Actions.authLogOutManagerSuccess, (state, action) => INIT_STATE_TOKEN));\nexport const reducers = {\n  manager: reducer,\n  tokens: reducerToken,\n  error: reducerError\n};\nexport const getAuthManager = state => state.manager;\nexport const getIsAuth = state => state.manager.isAuthenticated;\nexport const getEmailManager = state => state.manager.email;\nexport const getAuthToken = state => state.tokens;\nexport const getAuthError = state => state.error.error;\nexport const getUserRole = state => state.manager.role;","map":null,"metadata":{},"sourceType":"module"}