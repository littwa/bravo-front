{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport * as action from './actions';\nimport { TOKEN_LOCAL_STORAGE_KEY_ACCESS, TOKEN_LOCAL_STORAGE_KEY_REFRESH } from 'src/app/shared/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/shared/services/authorize.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/router\";\nexport let ManegerEffects = /*#__PURE__*/(() => {\n  class ManegerEffects {\n    constructor(actions$, managerService, store, router) {\n      this.actions$ = actions$;\n      this.managerService = managerService;\n      this.store = store;\n      this.router = router;\n      this.logInManger$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_LOG_IN_MANAGER_REQUEST), switchMap(props => this.managerService.logInManger(props).pipe(map(data => action.authLogInManagerSuccess({\n        payload: data\n      })), tap(() => this.router.navigate(['/login/verify'])), catchError(err => of(action.authLogInManagerError({\n        err: err.message\n      })))))));\n      this.signInCustomer$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_SIGN_IN_CUSTOMER_REQUEST), switchMap(props => this.managerService.signInManger(props).pipe(map(data => action.authSignInCustomerSuccess({\n        payload: data\n      })), tap(data => {\n        this.setMangerTokenLocalStorage(data.payload.tokens);\n        this.router.navigate(['/']);\n      }), catchError(err => of(action.authLogInManagerError({\n        err: err.message\n      })))))));\n      this.verifyAdmin$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_VERIFY_MANAGER_REQUEST), switchMap(props => this.managerService.verifyManger(props.payload).pipe(map(data => action.authVerifyManagerSuccess({\n        payload: data\n      })), tap(data => {\n        this.setAdminTokenLocalStorage(data.payload.token);\n        this.router.navigate(['/order']);\n      }), // login'\n      catchError(err => of(action.authVerifyManagerError({\n        err: err.message\n      })))))));\n      this.verifyCustomer$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_VERIFY_CUSTOMER_REQUEST), switchMap(props => {\n        return this.managerService.verifyCustomer(props.payload).pipe(map(data => action.authVerifyManagerSuccess({\n          payload: data\n        })), tap(data => {\n          this.router.navigate(['/']);\n        }), catchError(err => of(action.authVerifyManagerError({\n          err: err.message\n        }))));\n      }))); /////////////////////\n\n      this.updateCustomer$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_UPDATE_CUSTOMER_REQUEST), switchMap(props => {\n        return this.managerService.updateCustomer(props.payload).pipe(map(data => action.authUpdateCustomerSuccess({\n          payload: data\n        })), tap(data => {\n          console.log(88, data);\n          this.router.navigate(['/']);\n        }), catchError(err => of(action.authUpdateCustomerError({\n          err: err.message\n        }))));\n      }))); /////////////////////\n\n      this.logOutManger$ = createEffect(() => this.actions$.pipe(ofType(action.AUTH_LOG_OUT_MANAGER_REQUEST), map(() => action.authLogOutManagerSuccess()), tap(() => this.clearMangerTokenLocalStorage()), catchError(err => of(action.authLogOutManagerError({\n        err: err.message\n      })))));\n    }\n\n    setMangerTokenLocalStorage(tokens) {\n      if (tokens) {\n        localStorage.setItem(TOKEN_LOCAL_STORAGE_KEY_ACCESS, tokens.accessToken);\n        localStorage.setItem(TOKEN_LOCAL_STORAGE_KEY_REFRESH, tokens.refreshToken);\n      }\n    }\n\n    setAdminTokenLocalStorage(token) {\n      if (token) {\n        localStorage.setItem(TOKEN_LOCAL_STORAGE_KEY_ACCESS, token);\n      }\n    }\n\n    clearMangerTokenLocalStorage() {\n      localStorage.clear();\n    }\n\n  }\n\n  ManegerEffects.ɵfac = function ManegerEffects_Factory(t) {\n    return new (t || ManegerEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ManagerService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.Router));\n  };\n\n  ManegerEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManegerEffects,\n    factory: ManegerEffects.ɵfac\n  });\n  return ManegerEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}