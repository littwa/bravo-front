{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport * as action from \"./actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/shared/services/catalog.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let CatalogEffects = /*#__PURE__*/(() => {\n  class CatalogEffects {\n    constructor(actions$, catalogService, store) {\n      this.actions$ = actions$;\n      this.catalogService = catalogService;\n      this.store = store;\n      this.getCatalog$ = createEffect(() => this.actions$.pipe(ofType(action.CATALOG_GET_ALL_REQUEST), switchMap(() => this.catalogService.getAllProducts().pipe(map(data => action.catalogGetAllSuccess({\n        payload: data\n      })), catchError(err => of(action.catalogGetAllError({\n        err: err.message\n      })))))));\n      this.addProduct$ = createEffect(() => this.actions$.pipe(ofType(action.CATALOG_ADD_REQUEST), switchMap(props => {\n        return this.catalogService.addProduct(props).pipe(map(data => action.catalogAddSuccess({\n          payload: data\n        })), catchError(err => of(action.catalogAddError({\n          err: err.message\n        }))));\n      })));\n      this.updateProduct$ = createEffect(() => this.actions$.pipe(ofType(action.CATALOG_EDIT_REQUEST), switchMap(props => {\n        return this.catalogService.updateProduct(props).pipe(map(data => action.catalogEditSuccess({\n          payload: data\n        })), catchError(err => of(action.catalogEditError({\n          err: err.message\n        }))));\n      })));\n      this.delProduct$ = createEffect(() => this.actions$.pipe(ofType(action.CATALOG_DEL_REQUEST), switchMap(props => {\n        return this.catalogService.delProduct(props).pipe(map(() => action.catalogDelSuccess({\n          id: props.id\n        })), catchError(err => of(action.catalogDelError({\n          err: err.message\n        }))));\n      })));\n    }\n\n  }\n\n  CatalogEffects.ɵfac = function CatalogEffects_Factory(t) {\n    return new (t || CatalogEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CatalogService), i0.ɵɵinject(i3.Store));\n  };\n\n  CatalogEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CatalogEffects,\n    factory: CatalogEffects.ɵfac\n  });\n  return CatalogEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}